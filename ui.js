// Generated by CoffeeScript 1.3.3
(function() {
  var $, createFrameList, createOtherSelects, editFrame, pushFrame, turnOnOnion;

  $ = function(id) {
    return document.getElementById(id);
  };

  window.initTabs = function() {
    var tab, tabs, _i, _len, _results;
    tabs = document.getElementsByClassName("tab");
    _results = [];
    for (_i = 0, _len = tabs.length; _i < _len; _i++) {
      tab = tabs[_i];
      _results.push(tab.addEventListener("click", function(e) {
        var srcEl, _j, _len1;
        for (_j = 0, _len1 = tabs.length; _j < _len1; _j++) {
          tab = tabs[_j];
          tab.style.backgroundColor = "#C3DBDF";
        }
        srcEl = e.srcElement ? e.srcElement : e.target;
        srcEl.style.backgroundColor = "#FFF";
        switch (this.id) {
          case "tab-animatic":
            $("audio").style.display = "";
            $("view").style.display = "";
            $("options-container").style.display = "none";
            return $("draw-container").style.display = "none";
          case "tab-draw":
            $("audio").style.display = "none";
            $("view").style.display = "none";
            $("options-container").style.display = "none";
            return $("draw-container").style.display = "block";
          case "tab-options":
            $("audio").style.display = "none";
            $("view").style.display = "none";
            $("options-container").style.display = "block";
            return $("draw-container").style.display = "none";
        }
      }));
    }
    return _results;
  };

  window.message = function(msg) {
    return alert(msg);
  };

  window.initOnion = function() {
    var onion_toggle;
    onion_toggle = $("onion-toggle");
    return onion_toggle.addEventListener("change", function() {
      return turnOnOnion();
    });
  };

  pushFrame = function(data) {
    frame_index += 1;
    return window.frames[frame_index] = data;
  };

  window.saveFrame = function() {
    var data_url, edit;
    edit = $("edit-select");
    data_url = $("draw").toDataURL();
    if (edit === null) {
      pushFrame(data_url);
      createFrameList();
      addFrame();
    } else if (edit.value !== "edit") {
      window.frames[edit.value] = data_url;
      edit.value = "edit";
      drawTimeline();
    } else {
      pushFrame(data_url);
      createFrameList();
      addFrame();
    }
    return clearCanvas("draw");
  };

  window.deleteFrame = function() {
    var chunk, frame, index, _i, _len, _ref;
    frame = $("edit-select").value;
    delete window.frames[frame];
    _ref = window.animatic;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      chunk = _ref[index];
      if (chunk !== null && chunk[1] === frame) {
        window.animatic[index] = null;
      }
    }
    drawTimeline();
    createFrameList();
    return clearCanvas("draw");
  };

  window.cloneFrame = function() {
    var data_url;
    data_url = $("draw").toDataURL();
    pushFrame(data_url);
    createFrameList();
    return $("edit-select").value = $("insert-pic-select").value;
  };

  createFrameList = function() {
    var frame, select;
    select = $("insert-pic-select");
    select.options.length = 0;
    for (frame in window.frames) {
      select.options[select.options.length] = new Option(frame, frame);
    }
    select.value = frame;
    return createOtherSelects(select);
  };

  turnOnOnion = function() {
    var context, frame, img_obj, onionSelect, onion_canvas, onion_toggle;
    onionSelect = $("onion-select");
    if (onionSelect) {
      frame = onionSelect.value;
      onion_toggle = $("onion-toggle");
      clearCanvas("onion-canvas");
      if (onion_toggle.checked) {
        onion_canvas = $("onion-canvas");
        context = onion_canvas.getContext("2d");
        context.globalAlpha = .2;
        img_obj = new Image();
        img_obj.src = window.frames[frame];
        return img_obj.onload = function() {
          return context.drawImage(img_obj, 0, 0);
        };
      }
    } else {
      return message("You must have a frame to create an onion skin");
    }
  };

  editFrame = function(frame) {
    var canvas, context, img_obj;
    clearCanvas("draw");
    if (frame !== "edit") {
      canvas = $("draw");
      context = canvas.getContext("2d");
      context.globalCompositeOperation = "source-over";
      img_obj = new Image();
      img_obj.src = window.frames[frame];
      return img_obj.onload = function() {
        return context.drawImage(img_obj, 0, 0);
      };
    }
  };

  createOtherSelects = function(select) {
    var draw_container, edit_select, onion_select, save_button, select_clone, select_clone_0;
    draw_container = $("draw-container");
    select_clone = select.cloneNode(true);
    select_clone.id = 'onion-select';
    select_clone.value = select.value;
    onion_select = $("onion-select");
    if (onion_select) {
      onion_select.parentNode.removeChild(onion_select);
    }
    draw_container.appendChild(select_clone);
    turnOnOnion();
    onion_select = $("onion-select");
    onion_select.addEventListener("change", function() {
      return turnOnOnion();
    });
    select_clone_0 = select.cloneNode(true);
    select_clone_0.id = 'edit-select';
    select_clone_0.options[select.options.length] = new Option("Edit", "edit");
    select_clone_0.value = 'edit';
    save_button = $("save-frame");
    edit_select = $("edit-select");
    if (edit_select) {
      edit_select.parentNode.removeChild(edit_select);
    }
    draw_container.insertBefore(select_clone_0, save_button);
    edit_select = $("edit-select");
    return edit_select.addEventListener("change", function() {
      return editFrame(edit_select.value);
    });
  };

}).call(this);
